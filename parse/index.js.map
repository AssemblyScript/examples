{"version":3,"file":"index.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAiB,QAAID,IAErBD,EAAc,QAAIC,IARpB,CASmB,oBAATK,KAAuBA,KAAOC,MAAM,WAC9C,M,sCC0CA,IAAWC,EAXAC,EARAC,EAhBAC,EAXAC,EAJXV,EAAQW,YAAa,EACrBX,EAAQM,OAASN,EAAQY,UAAYZ,EAAQa,UAAYb,EAAQO,SAAWP,EAAQQ,aAAeR,EAAQS,UAAYT,EAAQU,UAAO,GAG3HA,EAQDV,EAAQU,OAASV,EAAQU,KAAO,KAPjCA,EAAU,IAAI,KAAO,MAC1BA,EAAKA,EAAU,IAAI,KAAO,MAC1BA,EAAKA,EAAU,IAAI,KAAO,MAC1BA,EAAKA,EAAU,IAAI,KAAO,MAC1BA,EAAKA,EAAc,QAAI,KAAO,UAC9BA,EAAKA,EAAW,KAAI,IAAM,OAC1BA,EAAKA,EAAW,KAAI,IAAM,QAInBD,EAaIT,EAAQS,YAAcT,EAAQS,UAAY,KAZ3CA,EAAkB,OAAI,GAAK,SACrCA,EAAUA,EAAgB,KAAI,GAAK,OACnCA,EAAUA,EAAkB,OAAI,GAAK,SACrCA,EAAUA,EAAoB,SAAI,GAAK,WACvCA,EAAUA,EAAiB,MAAI,GAAK,QACpCA,EAAUA,EAAkB,OAAI,GAAK,SACrCA,EAAUA,EAAkB,OAAI,GAAK,SACrCA,EAAUA,EAAkB,OAAI,GAAK,SACrCA,EAAUA,EAAiB,MAAI,GAAK,QACpCA,EAAUA,EAAmB,QAAI,GAAK,UACtCA,EAAUA,EAAgB,KAAI,IAAM,OACpCA,EAAUA,EAAgB,KAAI,IAAM,QAI7BD,EAKOR,EAAQQ,eAAiBR,EAAQQ,aAAe,KAJjDA,EAAuB,SAAI,GAAK,WAC7CA,EAAaA,EAAoB,MAAI,GAAK,QAC1CA,EAAaA,EAAqB,OAAI,GAAK,SAC3CA,EAAaA,EAAqB,OAAI,GAAK,UAIpCD,EAIGP,EAAQO,WAAaP,EAAQO,SAAW,KAHzCA,EAAiB,OAAI,GAAK,SACnCA,EAASA,EAAmB,SAAI,GAAK,WACrCA,EAASA,EAAgB,MAAI,GAAK,QAGtCP,EAAQa,UAAY,MAEpBb,EAAQY,UAAY,YAGTN,EA6KCN,EAAQM,SAAWN,EAAQM,OAAS,KAtKrCA,EAAY,IAAI,IAAM,MAY7BA,EAAOA,EAAmB,WAAI,IAAM,aA2BpCA,EAAOA,EAAkB,UAAI,IAAM,YACnCA,EAAOA,EAAkB,UAAI,IAAM,YACnCA,EAAOA,EAAkB,UAAI,IAAM,YACnCA,EAAOA,EAAkB,UAAI,IAAM,cCpGnCQ,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAajB,QAGrB,IAAIC,EAASa,EAAyBE,GAAY,CAGjDhB,QAAS,IAOV,OAHAmB,EAAoBH,GAAUf,EAAQA,EAAOD,QAASe,GAG/Cd,EAAOD,Q,6BCpBfA,EAAQW,YAAa,EACrBX,EAAQoB,MAAQpB,EAAQQ,aAAeR,EAAQS,UAAYT,EAAQU,UAAO,EAC1E,IAAIW,EAAW,EAAQ,KACvBrB,EAAQU,KAAOW,EAASX,KACxBV,EAAQS,UAAYY,EAASZ,UAC7BT,EAAQQ,aAAea,EAASb,aAEhC,IAAIc,EAAW,KAkDftB,EAAQoB,MA5CR,SAASA,EAAMG,EAAQC,GACdA,IACDA,EAAU,IAETF,IACDA,EAAW,IAAIG,YAAYC,OA4EnC,SAAuBC,GACnB,IAAIC,EAASD,EAAOC,OACpB,GAAIA,EAAQ,CAER,IADA,IAAIC,EAAI,EAAGC,EAAIF,IACNE,EAAI,EAAI,GAA8B,KAAzBH,EAAOI,WAAWD,MAClCD,EACND,EAASI,KAAKC,KAAc,EAATL,GAAc,EAAIC,EAIzC,IAFA,IAAIK,EAAS,IAAIC,WAAWP,GACxBQ,EAAI,EAAGC,EAAI,EAAGC,EAAI,EACbC,EAAI,EAAGC,EAAIb,EAAOC,OAAQW,EAAIC,GAAI,CACvC,IAAIC,EAAId,EAAOI,WAAWQ,KAC1B,GAAU,KAANE,GAAYL,EAAI,EAChB,MACJ,QAAqBlB,KAAhBuB,EAAIC,EAAID,IACT,MAAME,QACV,OAAQP,GACJ,KAAK,EACDE,EAAIG,EACJL,EAAI,EACJ,MAEJ,KAAK,EACDF,EAAOG,KAAOC,GAAK,GAAS,GAAJG,IAAW,EACnCH,EAAIG,EACJL,EAAI,EACJ,MAEJ,KAAK,EACDF,EAAOG,MAAY,GAAJC,IAAW,GAAS,GAAJG,IAAW,EAC1CH,EAAIG,EACJL,EAAI,EACJ,MAEJ,KAAK,EACDF,EAAOG,MAAY,EAAJC,IAAU,EAAIG,EAC7BL,EAAI,GAKhB,GAAU,IAANA,EACA,MAAMO,QACV,OAAOT,EAvH+BU,CAAc,k1OAEpD,IAAIC,EAAStB,EAAOK,OAChBkB,GAAWD,EAAS,OAAU,QAAY,GAC1CE,EAAS,IAAItB,YAAYuB,OAAO,CAAEC,QAASH,IAC3CZ,EAAS,IAAIC,WAAWY,EAAOb,QACnCA,EAAOgB,IAAI3B,GAEXH,EAAM+B,WAAa,SAAUC,EAAQxB,GAAU,OAiCnD,SAAmBM,EAAQmB,EAAOC,GAE9B,GADUA,EAAMD,EACN,EACN,MAAO,GAGX,IAFA,IAAIE,EAAQ,KAAMC,EAAQ,GACtBjB,EAAI,EAAGD,EAAI,EACRe,EAAQC,IACXhB,EAAIJ,EAAOmB,MACH,IACJG,EAAMjB,KAAOD,EAERA,EAAI,KAAOA,EAAI,IACpBkB,EAAMjB,MAAY,GAAJD,IAAW,EAAsB,GAAlBJ,EAAOmB,KAE/Bf,EAAI,KAAOA,EAAI,KACpBA,IAAU,EAAJA,IAAU,IAAwB,GAAlBJ,EAAOmB,OAAkB,IAAwB,GAAlBnB,EAAOmB,OAAkB,EAAsB,GAAlBnB,EAAOmB,MAAiB,MAC1GG,EAAMjB,KAAO,OAAUD,GAAK,IAC5BkB,EAAMjB,KAAO,OAAc,KAAJD,IAGvBkB,EAAMjB,MAAY,GAAJD,IAAW,IAAwB,GAAlBJ,EAAOmB,OAAkB,EAAsB,GAAlBnB,EAAOmB,KAEnEd,EAAI,QACHgB,IAAUA,EAAQ,KAAKE,KAAKC,OAAOC,aAAaC,MAAMF,OAAQF,IAC/DjB,EAAI,GAGZ,OAAIgB,GACIhB,GACAgB,EAAME,KAAKC,OAAOC,aAAaC,MAAMF,OAAQF,EAAMK,MAAM,EAAGtB,KACzDgB,EAAMO,KAAK,KAEfJ,OAAOC,aAAaC,MAAMF,OAAQF,EAAMK,MAAM,EAAGtB,IAjEFwB,CAAU7B,EAAQkB,EAAQA,EAASxB,IAEzF,IAAIoC,EAAU,CACVC,IAAK,CACDlB,OAAQA,GAEZvB,QAAS,IAEb,CAAC,YACG,SACA,cACA,eACA,WACA,mBACA,gBACA,iBACA,iBACA,WACA,aACA,UACA,WACA,WACA,UACA,qBACA,eACA,iBACA,eACF0C,SAAQ,SAAUC,GAAQ,OAAOH,EAAQxC,QAAQ2C,GAAQ3C,EAAQ2C,IAAS,gBAC7D,IAAI1C,YAAY2C,SAAS9C,EAAU0C,GACzChE,QAAQoB,MAAM,EAAGyB,IAqF9B,IADA,IAAIH,EAAM,IAAI2B,MAAM,KACX9B,EAAI,EAAGA,EAAI,IAChBG,EAAIH,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,EAAIA,EAAI,GAAK,IAAMA,K","sources":["webpack://asparse/webpack/universalModuleDefinition","webpack://asparse/./src/common.ts","webpack://asparse/webpack/bootstrap","webpack://asparse/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"asparse\"] = factory();\n\telse\n\t\troot[\"asparse\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn ","\"use strict\";\r\n/** Common constants shared between AssemblyScript and TypeScript. */\r\nexports.__esModule = true;\r\nexports.Opcode = exports.MAX_ELEMS = exports.MAX_PAGES = exports.NameType = exports.ExternalKind = exports.SectionId = exports.Type = void 0;\r\n/** WebAssembly types. */\r\nvar Type;\r\n(function (Type) {\r\n    Type[Type[\"i32\"] = 127] = \"i32\";\r\n    Type[Type[\"i64\"] = 126] = \"i64\";\r\n    Type[Type[\"f32\"] = 125] = \"f32\";\r\n    Type[Type[\"f64\"] = 124] = \"f64\";\r\n    Type[Type[\"anyfunc\"] = 112] = \"anyfunc\";\r\n    Type[Type[\"func\"] = 96] = \"func\";\r\n    Type[Type[\"none\"] = 64] = \"none\";\r\n})(Type = exports.Type || (exports.Type = {}));\r\n/** WebAssembly section ids. */\r\nvar SectionId;\r\n(function (SectionId) {\r\n    SectionId[SectionId[\"Custom\"] = 0] = \"Custom\";\r\n    SectionId[SectionId[\"Type\"] = 1] = \"Type\";\r\n    SectionId[SectionId[\"Import\"] = 2] = \"Import\";\r\n    SectionId[SectionId[\"Function\"] = 3] = \"Function\";\r\n    SectionId[SectionId[\"Table\"] = 4] = \"Table\";\r\n    SectionId[SectionId[\"Memory\"] = 5] = \"Memory\";\r\n    SectionId[SectionId[\"Global\"] = 6] = \"Global\";\r\n    SectionId[SectionId[\"Export\"] = 7] = \"Export\";\r\n    SectionId[SectionId[\"Start\"] = 8] = \"Start\";\r\n    SectionId[SectionId[\"Element\"] = 9] = \"Element\";\r\n    SectionId[SectionId[\"Code\"] = 10] = \"Code\";\r\n    SectionId[SectionId[\"Data\"] = 11] = \"Data\";\r\n})(SectionId = exports.SectionId || (exports.SectionId = {}));\r\n/** WebAssembly external kinds. */\r\nvar ExternalKind;\r\n(function (ExternalKind) {\r\n    ExternalKind[ExternalKind[\"Function\"] = 0] = \"Function\";\r\n    ExternalKind[ExternalKind[\"Table\"] = 1] = \"Table\";\r\n    ExternalKind[ExternalKind[\"Memory\"] = 2] = \"Memory\";\r\n    ExternalKind[ExternalKind[\"Global\"] = 3] = \"Global\";\r\n})(ExternalKind = exports.ExternalKind || (exports.ExternalKind = {}));\r\n/** Name section types. */\r\nvar NameType;\r\n(function (NameType) {\r\n    NameType[NameType[\"Module\"] = 0] = \"Module\";\r\n    NameType[NameType[\"Function\"] = 1] = \"Function\";\r\n    NameType[NameType[\"Local\"] = 2] = \"Local\";\r\n})(NameType = exports.NameType || (exports.NameType = {}));\r\n/** Maximum number of memory pages. */\r\nexports.MAX_PAGES = 0xffff;\r\n/** Maximum number of table elements. */\r\nexports.MAX_ELEMS = 0xffffffff;\r\n/** WebAssembly opcodes. */\r\nvar Opcode;\r\n(function (Opcode) {\r\n    // unreachable = 0x00,\r\n    // nop = 0x01,\r\n    // block = 0x02,\r\n    // loop = 0x03,\r\n    // if_ = 0x04,\r\n    // else_ = 0x05,\r\n    Opcode[Opcode[\"end\"] = 11] = \"end\";\r\n    // br = 0x0c,\r\n    // br_if = 0x0d,\r\n    // br_table = 0x0e,\r\n    // return_ = 0x0f,\r\n    // call = 0x10,\r\n    // call_indirect = 0x11,\r\n    // drop = 0x1a,\r\n    // select = 0x1b,\r\n    // get_local = 0x20,\r\n    // set_local = 0x21,\r\n    // tee_local = 0x22,\r\n    Opcode[Opcode[\"get_global\"] = 35] = \"get_global\";\r\n    // set_global = 0x24,\r\n    // i32_load = 0x28,\r\n    // i64_load = 0x29,\r\n    // f32_load = 0x2a,\r\n    // f64_load = 0x2b,\r\n    // i32_load8_s = 0x2c,\r\n    // i32_load8_u = 0x2d,\r\n    // i32_load16_s = 0x2e,\r\n    // i32_load16_u = 0x2f,\r\n    // i64_load8_s = 0x30,\r\n    // i64_load8_u = 0x31,\r\n    // i64_load16_s = 0x32,\r\n    // i64_load16_u = 0x33,\r\n    // i64_load32_s = 0x34,\r\n    // i64_load32_u = 0x35,\r\n    // i32_store = 0x36,\r\n    // i64_store = 0x37,\r\n    // f32_store = 0x38,\r\n    // f64_store = 0x39,\r\n    // i32_store8 = 0x3a,\r\n    // i32_store16 = 0x3b,\r\n    // i64_store8 = 0x3c,\r\n    // i64_store16 = 0x3d,\r\n    // i64_store32 = 0x3e,\r\n    // current_memory = 0x3f,\r\n    // grow_memory = 0x40,\r\n    Opcode[Opcode[\"i32_const\"] = 65] = \"i32_const\";\r\n    Opcode[Opcode[\"i64_const\"] = 66] = \"i64_const\";\r\n    Opcode[Opcode[\"f32_const\"] = 67] = \"f32_const\";\r\n    Opcode[Opcode[\"f64_const\"] = 68] = \"f64_const\";\r\n    // i32_eqz = 0x45,\r\n    // i32_eq = 0x46,\r\n    // i32_ne = 0x47,\r\n    // i32_lt_s = 0x48,\r\n    // i32_lt_u = 0x49,\r\n    // i32_gt_s = 0x4a,\r\n    // i32_gt_u = 0x4b,\r\n    // i32_le_s = 0x4c,\r\n    // i32_le_u = 0x4d,\r\n    // i32_ge_s = 0x4e,\r\n    // i32_ge_u = 0x4f,\r\n    // i64_eqz = 0x50,\r\n    // i64_eq = 0x51,\r\n    // i64_ne = 0x52,\r\n    // i64_lt_s = 0x53,\r\n    // i64_lt_u = 0x54,\r\n    // i64_gt_s = 0x55,\r\n    // i64_gt_u = 0x56,\r\n    // i64_le_s = 0x57,\r\n    // i64_le_u = 0x58,\r\n    // i64_ge_s = 0x59,\r\n    // i64_ge_u = 0x5a,\r\n    // f32_eq = 0x5b,\r\n    // f32_ne = 0x5c,\r\n    // f32_lt = 0x5d,\r\n    // f32_gt = 0x5e,\r\n    // f32_le = 0x5f,\r\n    // f32_ge = 0x60,\r\n    // f64_eq = 0x61,\r\n    // f64_ne = 0x62,\r\n    // f64_lt = 0x63,\r\n    // f64_gt = 0x64,\r\n    // f64_le = 0x65,\r\n    // f64_ge = 0x66,\r\n    // i32_clz = 0x67,\r\n    // i32_ctz = 0x68,\r\n    // i32_popcnt = 0x69,\r\n    // i32_add = 0x6a,\r\n    // i32_sub = 0x6b,\r\n    // i32_mul = 0x6c,\r\n    // i32_div_s = 0x6d,\r\n    // i32_div_u = 0x6e,\r\n    // i32_rem_s = 0x6f,\r\n    // i32_rem_u = 0x70,\r\n    // i32_and = 0x71,\r\n    // i32_or = 0x72,\r\n    // i32_xor = 0x73,\r\n    // i32_shl = 0x74,\r\n    // i32_shr_s = 0x75,\r\n    // i32_shr_u = 0x76,\r\n    // i32_rotl = 0x77,\r\n    // i32_rotr = 0x78,\r\n    // i64_clz = 0x79,\r\n    // i64_ctz = 0x7a,\r\n    // i64_popcnt = 0x7b,\r\n    // i64_add = 0x7c,\r\n    // i64_sub = 0x7d,\r\n    // i64_mul = 0x7e,\r\n    // i64_div_s = 0x7f,\r\n    // i64_div_u = 0x80,\r\n    // i64_rem_s = 0x81,\r\n    // i64_rem_u = 0x82,\r\n    // i64_and = 0x83,\r\n    // i64_or = 0x84,\r\n    // i64_xor = 0x85,\r\n    // i64_shl = 0x86,\r\n    // i64_shr_s = 0x87,\r\n    // i64_shr_u = 0x88,\r\n    // i64_rotl = 0x89,\r\n    // i64_rotr = 0x8a,\r\n    // f32_abs = 0x8b,\r\n    // f32_neg = 0x8c,\r\n    // f32_ceil = 0x8d,\r\n    // f32_floor = 0x8e,\r\n    // f32_trunc = 0x8f,\r\n    // f32_nearest = 0x90,\r\n    // f32_sqrt = 0x91,\r\n    // f32_add = 0x92,\r\n    // f32_sub = 0x93,\r\n    // f32_mul = 0x94,\r\n    // f32_div = 0x95,\r\n    // f32_min = 0x96,\r\n    // f32_max = 0x97,\r\n    // f32_copysign = 0x98,\r\n    // f64_abs = 0x99,\r\n    // f64_neg = 0x9a,\r\n    // f64_ceil = 0x9b,\r\n    // f64_floor = 0x9c,\r\n    // f64_trunc = 0x9d,\r\n    // f64_nearest = 0x9e,\r\n    // f64_sqrt = 0x9f,\r\n    // f64_add = 0xa0,\r\n    // f64_sub = 0xa1,\r\n    // f64_mul = 0xa2,\r\n    // f64_div = 0xa3,\r\n    // f64_min = 0xa4,\r\n    // f64_max = 0xa5,\r\n    // f64_copysign = 0xa6,\r\n    // i32_wrap_i64 = 0xa7,\r\n    // i32_trunc_s_f32 = 0xa8,\r\n    // i32_trunc_u_f32 = 0xa9,\r\n    // i32_trunc_s_f64 = 0xaa,\r\n    // i32_trunc_u_f64 = 0xab,\r\n    // i64_extend_s_i32 = 0xac,\r\n    // i64_extend_u_i32 = 0xad,\r\n    // i64_trunc_s_f32 = 0xae,\r\n    // i64_trunc_u_f32 = 0xaf,\r\n    // i64_trunc_s_f64 = 0xb0,\r\n    // i64_trunc_u_f64 = 0xb1,\r\n    // f32_convert_s_i32 = 0xb2,\r\n    // f32_convert_u_i32 = 0xb3,\r\n    // f32_convert_s_i64 = 0xb4,\r\n    // f32_convert_u_i64 = 0xb5,\r\n    // f32_demote_f64 = 0xb6,\r\n    // f64_convert_s_i32 = 0xb7,\r\n    // f64_convert_u_i32 = 0xb8,\r\n    // f64_convert_s_i64 = 0xb9,\r\n    // f64_convert_u_i64 = 0xba,\r\n    // f64_promote_f32 = 0xbb,\r\n    // i32_reinterpret_f32 = 0xbc,\r\n    // i64_reinterpret_f64 = 0xbd,\r\n    // f32_reinterpret_i32 = 0xbe,\r\n    // f64_reinterpret_i64 = 0xbf\r\n})(Opcode = exports.Opcode || (exports.Opcode = {}));\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\r\nexports.__esModule = true;\r\nexports.parse = exports.ExternalKind = exports.SectionId = exports.Type = void 0;\r\nvar common_1 = require(\"./common\");\r\nexports.Type = common_1.Type;\r\nexports.SectionId = common_1.SectionId;\r\nexports.ExternalKind = common_1.ExternalKind;\r\n/** Cached compiled parser. */\r\nvar compiled = null;\r\nif (typeof WASM_DATA !== \"string\") {\r\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n    WASM_DATA = require(\"fs\").readFileSync(__dirname + \"/../build/index.wasm\", \"base64\");\r\n}\r\n/** Parses the contents of a WebAssembly binary according to the specified options. */\r\nfunction parse(binary, options) {\r\n    if (!options)\r\n        options = {};\r\n    // compile the parser if not yet compiled\r\n    if (!compiled)\r\n        compiled = new WebAssembly.Module(base64_decode(WASM_DATA));\r\n    // use the binary as the parser's memory\r\n    var nBytes = binary.length;\r\n    var nPages = ((nBytes + 0xffff) & ~0xffff) >> 16;\r\n    var memory = new WebAssembly.Memory({ initial: nPages });\r\n    var buffer = new Uint8Array(memory.buffer);\r\n    buffer.set(binary);\r\n    // provide a way to read strings from memory\r\n    parse.readString = function (offset, length) { return utf8_read(buffer, offset, offset + length); };\r\n    // instantiate the parser and return its exports\r\n    var imports = {\r\n        env: {\r\n            memory: memory\r\n        },\r\n        options: {}\r\n    };\r\n    [\"onSection\",\r\n        \"onType\",\r\n        \"onTypeParam\",\r\n        \"onTypeReturn\",\r\n        \"onImport\",\r\n        \"onFunctionImport\",\r\n        \"onTableImport\",\r\n        \"onMemoryImport\",\r\n        \"onGlobalImport\",\r\n        \"onMemory\",\r\n        \"onFunction\",\r\n        \"onTable\",\r\n        \"onGlobal\",\r\n        \"onExport\",\r\n        \"onStart\",\r\n        \"onSourceMappingURL\",\r\n        \"onModuleName\",\r\n        \"onFunctionName\",\r\n        \"onLocalName\"\r\n    ].forEach(function (name) { return imports.options[name] = options[name] || function () { }; });\r\n    var instance = new WebAssembly.Instance(compiled, imports);\r\n    instance.exports.parse(0, nBytes); // ?\r\n}\r\nexports.parse = parse;\r\n// see: https://github.com/dcodeIO/protobuf.js/tree/master/lib/utf8\r\nfunction utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null, chunk = [];\r\n    var i = 0, t = 0; // char offset and temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128) {\r\n            chunk[i++] = t;\r\n        }\r\n        else if (t > 191 && t < 224) {\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        }\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        }\r\n        else {\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n}\r\n// see: https://github.com/dcodeIO/protobuf.js/tree/master/lib/base64\r\nfunction base64_decode(string) {\r\n    var length = string.length;\r\n    if (length) {\r\n        var n = 0, p = length;\r\n        while (--p % 4 > 1 && string.charCodeAt(p) === 61)\r\n            ++n;\r\n        length = Math.ceil(length * 3) / 4 - n;\r\n    }\r\n    var buffer = new Uint8Array(length);\r\n    var j = 0, o = 0, t = 0;\r\n    for (var i = 0, k = string.length; i < k;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error();\r\n        switch (j) {\r\n            case 0: {\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            }\r\n            case 1: {\r\n                buffer[o++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            }\r\n            case 2: {\r\n                buffer[o++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            }\r\n            case 3: {\r\n                buffer[o++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error();\r\n    return buffer;\r\n}\r\nvar s64 = new Array(123);\r\nfor (var i = 0; i < 64;)\r\n    s64[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n"],"names":["root","factory","exports","module","define","amd","self","this","Opcode","NameType","ExternalKind","SectionId","Type","__esModule","MAX_ELEMS","MAX_PAGES","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","parse","common_1","compiled","binary","options","WebAssembly","Module","string","length","n","p","charCodeAt","Math","ceil","buffer","Uint8Array","j","o","t","i","k","c","s64","Error","base64_decode","nBytes","nPages","memory","Memory","initial","set","readString","offset","start","end","parts","chunk","push","String","fromCharCode","apply","slice","join","utf8_read","imports","env","forEach","name","Instance","Array"],"sourceRoot":""}